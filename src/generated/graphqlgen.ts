// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import {GraphQLResolveInfo} from 'graphql';
import {Feed, Link, User, Vote, AuthPayload} from '../types';
import {Context} from '../types';

type LinkOrderByInput =
  | 'description_ASC'
  | 'description_DESC'
  | 'url_ASC'
  | 'url_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC';

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsFeed {
    filter: string | null;
    skip: number | null;
    first: number | null;
    orderBy: LinkOrderByInput | null;
  }

  export interface ArgsLink {
    id: string;
  }

  export type InfoResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type FeedResolver = (
    parent: undefined,
    args: ArgsFeed,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Feed | Promise<Feed>;

  export type LinkResolver = (
    parent: undefined,
    args: ArgsLink,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Link | null | Promise<Link | null>;

  export interface Type {
    info: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    feed: (
      parent: undefined,
      args: ArgsFeed,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Feed | Promise<Feed>;

    link: (
      parent: undefined,
      args: ArgsLink,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Link | null | Promise<Link | null>;
  }
}

export namespace FeedResolvers {
  export const defaultResolvers = {
    count: (parent: Feed) => parent.count,
  };

  export type LinksResolver = (
    parent: Feed,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Link[] | Promise<Link[]>;

  export type CountResolver = (
    parent: Feed,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => number | Promise<number>;

  export interface Type {
    links: (
      parent: Feed,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Link[] | Promise<Link[]>;

    count: (
      parent: Feed,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => number | Promise<number>;
  }
}

export namespace LinkResolvers {
  export const defaultResolvers = {
    id: (parent: Link) => parent.id,
    description: (parent: Link) => parent.description,
    url: (parent: Link) => parent.url,
  };

  export type IdResolver = (
    parent: Link,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type DescriptionResolver = (
    parent: Link,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type UrlResolver = (
    parent: Link,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type PostedByResolver = (
    parent: Link,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User | null | Promise<User | null>;

  export type VotesResolver = (
    parent: Link,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Vote[] | Promise<Vote[]>;

  export interface Type {
    id: (
      parent: Link,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    description: (
      parent: Link,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    url: (
      parent: Link,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    postedBy: (
      parent: Link,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User | null | Promise<User | null>;

    votes: (
      parent: Link,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Vote[] | Promise<Vote[]>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    name: (parent: User) => parent.name,
    email: (parent: User) => parent.email,
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type EmailResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type LinksResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Link[] | Promise<Link[]>;

  export type VotesResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Vote[] | Promise<Vote[]>;

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    name: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    email: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    links: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Link[] | Promise<Link[]>;

    votes: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Vote[] | Promise<Vote[]>;
  }
}

export namespace VoteResolvers {
  export const defaultResolvers = {
    id: (parent: Vote) => parent.id,
  };

  export type IdResolver = (
    parent: Vote,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type LinkResolver = (
    parent: Vote,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Link | Promise<Link>;

  export type UserResolver = (
    parent: Vote,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User | Promise<User>;

  export interface Type {
    id: (
      parent: Vote,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    link: (
      parent: Vote,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Link | Promise<Link>;

    user: (
      parent: Vote,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User | Promise<User>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface IDInput {
    id: string;
  }
  export interface UpdateLinkInput {
    url: string | null;
    description: string | null;
  }

  export interface ArgsCreateLink {
    url: string;
    description: string;
  }

  export interface ArgsUpdateLink {
    where: IDInput | null;
    data: UpdateLinkInput | null;
  }

  export interface ArgsDeleteLink {
    id: string;
  }

  export interface ArgsSignup {
    email: string;
    password: string;
    name: string;
  }

  export interface ArgsLogin {
    email: string;
    password: string;
  }

  export interface ArgsVote {
    linkId: string;
  }

  export type CreateLinkResolver = (
    parent: undefined,
    args: ArgsCreateLink,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Link | Promise<Link>;

  export type UpdateLinkResolver = (
    parent: undefined,
    args: ArgsUpdateLink,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Link | null | Promise<Link | null>;

  export type DeleteLinkResolver = (
    parent: undefined,
    args: ArgsDeleteLink,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Link | null | Promise<Link | null>;

  export type SignupResolver = (
    parent: undefined,
    args: ArgsSignup,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => AuthPayload | null | Promise<AuthPayload | null>;

  export type LoginResolver = (
    parent: undefined,
    args: ArgsLogin,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => AuthPayload | null | Promise<AuthPayload | null>;

  export type VoteResolver = (
    parent: undefined,
    args: ArgsVote,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Vote | null | Promise<Vote | null>;

  export interface Type {
    createLink: (
      parent: undefined,
      args: ArgsCreateLink,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Link | Promise<Link>;

    updateLink: (
      parent: undefined,
      args: ArgsUpdateLink,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Link | null | Promise<Link | null>;

    deleteLink: (
      parent: undefined,
      args: ArgsDeleteLink,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Link | null | Promise<Link | null>;

    signup: (
      parent: undefined,
      args: ArgsSignup,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => AuthPayload | null | Promise<AuthPayload | null>;

    login: (
      parent: undefined,
      args: ArgsLogin,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => AuthPayload | null | Promise<AuthPayload | null>;

    vote: (
      parent: undefined,
      args: ArgsVote,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Vote | null | Promise<Vote | null>;
  }
}

export namespace AuthPayloadResolvers {
  export const defaultResolvers = {
    token: (parent: AuthPayload) =>
      parent.token === undefined ? null : parent.token,
  };

  export type TokenResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type UserResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User | null | Promise<User | null>;

  export interface Type {
    token: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    user: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User | null | Promise<User | null>;
  }
}

export namespace SubscriptionResolvers {
  export const defaultResolvers = {};

  export type NewLinkResolver = {
    subscribe: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => AsyncIterator<Link | null> | Promise<AsyncIterator<Link | null>>;
    resolve?: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Link | null | Promise<Link | null>;
  };

  export type NewVoteResolver = {
    subscribe: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => AsyncIterator<Vote | null> | Promise<AsyncIterator<Vote | null>>;
    resolve?: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Vote | null | Promise<Vote | null>;
  };

  export interface Type {
    newLink: {
      subscribe: (
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => AsyncIterator<Link | null> | Promise<AsyncIterator<Link | null>>;
      resolve?: (
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Link | null | Promise<Link | null>;
    };

    newVote: {
      subscribe: (
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => AsyncIterator<Vote | null> | Promise<AsyncIterator<Vote | null>>;
      resolve?: (
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Vote | null | Promise<Vote | null>;
    };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Feed: FeedResolvers.Type;
  Link: LinkResolvers.Type;
  User: UserResolvers.Type;
  Vote: VoteResolvers.Type;
  Mutation: MutationResolvers.Type;
  AuthPayload: AuthPayloadResolvers.Type;
  Subscription: SubscriptionResolvers.Type;
}
